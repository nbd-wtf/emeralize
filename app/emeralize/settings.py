"""
Django settings for emeralize project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from pathlib import Path
import os
import django
from django.utils.encoding import force_str
import environ
env = environ.Env()
environ.Env.read_env()


django.utils.encoding.force_text = force_str


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# Change to your own domain if deploying to prod.
ALLOWED_HOSTS = ['www.emeralize.app', 'emeralize.app',  'localhost', '127.0.0.1', '3.225.112.64']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #my apps
    'marketplace',
    'criticalpath',
    'accounts',
    "crispy_forms",
    "crispy_bootstrap5",
    'django_quill',
    # if using s3 uncomment out
    # 'storages',

    # if using captcha, uncomment out
    # 'captcha',

    # if using email verification uncomment out.
    # 'django_email_verification',
]

# Uncomment to enable CAPTCHA
# RECAPTCHA_PUBLIC_KEY = env('RECAPTCHA_PUBLIC_KEY')
# RECAPTCHA_PRIVATE_KEY = env('RECAPTCHA_PRIVATE_KEY')
# SILENCED_SYSTEM_CHECKS = ['captcha.recaptcha_test_key_error']
# RECAPTCHA_REQUIRED_SCORE = 0.85

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'emeralize.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.messages.context_processors.messages',
                'django.contrib.auth.context_processors.auth',
            ],
        },
    },
]

WSGI_APPLICATION = 'emeralize.wsgi.application'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

# max file size upload -- relates to quill editor image uploads.
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880 * 2


# SMTP CONFIG
# if using email verification uncomment out and set .env.

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = env('EMAIL_HOST')
# EMAIL_USE_SSL = env('EMAIL_USE_SSL')
# EMAIL_PORT = env('EMAIL_PORT')
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

# def verified_callback(user):
#     user.is_active = True

# EMAIL_VERIFIED_CALLBACK = verified_callback
# EMAIL_FROM_ADDRESS = 'noreply@emeralize.com'
# EMAIL_MAIL_SUBJECT = 'Confirm your email for emeralize.app'
# EMAIL_MAIL_HTML = os.path.join(BASE_DIR, 'templates/registration/mail_body.html')
# EMAIL_MAIL_PLAIN = os.path.join(BASE_DIR, 'templates/registration/mail_body.txt')
# EMAIL_MAIL_TOKEN_LIFE = 60 * 60
# EMAIL_MAIL_PAGE_TEMPLATE = os.path.join(BASE_DIR, 'templates/registration/confirm_template.html')
# EMAIL_PAGE_DOMAIN = 'https://emeralize.app/'
# EMAIL_MULTI_USER = False  # optional (defaults to False)

# end uncomment

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# AWS EB will set this automatically, otherwise just use sqlite3.
# Set in the .env to use.
if 'RDS_DB_NAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'emeralize.validators.MaxLengthValidator',
    },
]


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
]

AUTH_PROFILE_MODULE = 'marketplace.UserProfile'


LOGOUT_REDIRECT_URL = '/'


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Phoenix'
USE_I18N = True
USE_L10N = True
USE_TZ = True

SITE_ID = 1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "static_collect")


FILE_UPLOAD_MAX_MEMORY_SIZE = 78643200

# media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = "media/"


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Enable if deploying to production using HTTPS

# HTTPS Settings
# Uncomment all below if deploying to prod and will have HTTPS.

# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# SECURE_SSL_REDIRECT = True
# # HSTS Secure
# SECURE_HSTS_SECONDS = 31536000
# SECURE_HSTS_PRELOAD = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True


# aws s3 storage config
if 'AWS_STORAGE_BUCKET_NAME' in os.environ:
    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY =os.environ['AWS_SECRET_ACCESS_KEY']
    AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_REGION_NAME = 'us-west-2'
    AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None
    AWS_S3_VERIFY = True
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage' 
    AWS_QUERYSTRING_AUTH = False

